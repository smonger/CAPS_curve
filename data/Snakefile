from snakemake.remote.GS import RemoteProvider

GS = RemoteProvider(stay_on_remote=True)

# TODO: "preprocessing.py" is a bit different in the benchmarking project

###############################################################################
#                                 Input files                                 #
###############################################################################

# List of variants annotated with different versions of SpliceSM and SpliceAI scores.
#splicesm_scores = GS.remote(config["splicesm_scores_path"])
#splicesm_scores_genomes = GS.remote(config["splicesm_scores_genomes_path"])
splicing_scores_exomes = GS.remote(config["gcp_rootdir"] + "hg38_gnomad_v4_exome_splicing_scores_27052024.bgz")
splicing_scores_genomes = GS.remote(config["gcp_rootdir"] + "hg38_gnomad_v4_genome_splicing_scores_27052024.bgz")
missense_scores_exomes = GS.remote(config["gcp_rootdir"] + "hg38_gnomad_v4.1.0_exome_missense_predictors.txt.bgz"

###############################################################################
#                                 Output files                                #
###############################################################################

variants_w_splicesm_spliceai = GS.remote(config["gcp_rootdir"] + "variants_w_splicing_04072024_exomes.tsv.bgz"
variants_w_splicesm_spliceai_genomes = GS.remote(config["gcp_rootdir"] + "variants_w_splicing_04072024_genomes.tsv.bgz"
variants_w_missense_exomes = GS.remote(config["gcp_rootdir"] + "variants_w_missense_04072024_exomes.tsv.bgz"

###############################################################################

rule all:
    input:
        variants_w_splicesm_spliceai,
        variants_w_splicesm_spliceai_genomes,
        variants_w_missense_exomes,

###############################################################################
#                                    Exomes                                   #
###############################################################################


rule annotate_exomes_w_SpliceSM_and_SpliceAI:
    output:
        variants_w_splicesm_spliceai,
    run:
        import hail as hl
        from preprocessing import preprocessing

        # Read the scores, converting "chrN" (hg38) to "N" (hg19)
        splicesm = hl.import_table(
            splicing_scores_exomes,
            #"gs://vccri-mikgud-uscentral1/gnomad_exomes_v2111_sai_ssm_absplice_inner_merge.txt.bgz",
            delimiter="\t",
            missing="",
            find_replace=("chr", ""),
        )

        # The first line (from the header) will be malformed - get rid of it
        splicesm = splicesm.filter(splicesm.start != "start")

        # Convert the types from "str" to integer/float
        from hail.expr.functions import int32, float64

        splicesm = splicesm.transmute(
            ds_ag=float64(splicesm.DS_AG),
            ds_al=float64(splicesm.DS_AL),
            ds_dg=float64(splicesm.DS_DG),
            ds_dl=float64(splicesm.DS_DL),
            sai_sum=float64(splicesm.sai_sum),
            sai_max=float64(splicesm.sai_max),
            sai_loss125=float64(splicesm.sai_loss125),
            sai_loss150=float64(splicesm.sai_loss150),
            sai_1xgb=float64(splicesm.sai_1xgb),
            ssm_1e=float64(splicesm.ssm_1e),
            ssm_1amne=float64(splicesm.ssm_1amne),
            ssm_1amdi=float64(splicesm.ssm_1amdi),
            ssm_1amnsu=float64(splicesm.ssm_1amnsu),
            sai_2xgb=float64(splicesm.sai_2xgb),
            ssm_2e=float64(splicesm.ssm_2e),
            ssm_2amne=float64(splicesm.ssm_2amne),
            ssm_2amdi=float64(splicesm.ssm_2amdi),
            ssm_2amnsu=float64(splicesm.ssm_2amnsu),
            absplice=float64(splicesm.absplice),
            pangolin=float64(splicesm.pangolin),
            start=int32(splicesm.start),
        )

        # Index the variants for which scores are available to match
        # the keys of Hail tables
        splicesm = splicesm.key_by(
            locus=hl.locus(splicesm.chr, splicesm.start, reference_genome="GRCh38"),
            alleles=[splicesm.ref, splicesm.alt],
        )

        # Load all variants from gnomAD exomes and perform QC and
        # annotations
        exomes = preprocessing(
           config["exomes_ht_path"],
            config["context_ht_path"],
            config["mutation_rates_ht_path"],
            config["coverage_exomes_ht_path"],
            {"female": config["female_exomes"], "male": config["male_exomes"]},
        )

        splicesm = splicesm[exomes.key]
        exomes = exomes.annotate(            
            ds_ag=splicesm.ds_ag,
            ds_al=splicesm.ds_al,
            ds_dg=splicesm.ds_dg,
            ds_dl=splicesm.ds_dl,
            sai_sum=splicesm.sai_sum,
            sai_max=splicesm.sai_max,
            sai_loss125=splicesm.sai_loss125,
            sai_loss150=splicesm.sai_loss150,
            ssm_1xgb=splicesm.ssm_1xgb,
            ssm_1e=splicesm.ssm_1e,
            ssm_1amne=splicesm.ssm_1amne,
            ssm_1amdi=splicesm.ssm_1amdi,
            ssm_1amnsu=splicesm.ssm_1amnsu,
            ssm_2xgb=splicesm.ssm_2xgb,
            ssm_2e=splicesm.ssm_2e,
            ssm_2amne=splicesm.ssm_2amne,
            ssm_2amdi=splicesm.ssm_2amdi,
            ssm_2amnsu=splicesm.ssm_2amnsu,
            absplice=splicesm.absplice,
            pangolin=splicesm.pangolin,
        )

        exomes = exomes.annotate(AC=exomes.freq[0].AC)
        exomes=exomes.filter(exomes.worst_csq!="stop_gained")
        exomes.select(
            "context",
            "ref",
            "alt",
            "methylation_level",
            "mu",
            "worst_csq",
            "protein_coding",
            "coverage",
            "ds_ag",
            "ds_al",
            "ds_dg",
            "ds_dl",
            "sai_sum",
            "sai_max",
            "sai_loss125",
            "sai_loss150",
            "ssm_1xgb",
            "ssm_1e",
            "ssm_1amne",
            "ssm_1amdi",
            "ssm_1amnsu",
            "ssm_2xgb",
            "ssm_2e",
            "ssm_2amne",
            "ssm_2amdi",
            "ssm_2amnsu",
            "absplice",
            "pangolin",
        ).export(output[0])


###############################################################################
#                                   Genomes                                   #
###############################################################################


rule annotate_genomes_w_SpliceSM_and_SpliceAI:
    output:
        variants_w_splicesm_spliceai_genomes,
    run:
        import hail as hl
        from preprocessing import preprocessing

        # Read the scores, converting "chrN" (hg38) to "N" (hg19)
        splicesm = hl.import_table(
            splicing_scores_genomes,
            delimiter="\t",
            missing="",
            find_replace=("chr", ""),
        )

        # The first line (from the header) will be malformed - get rid of it
        splicesm = splicesm.filter(splicesm.start != "start")

        # Convert the types from "str" to integer/float
        from hail.expr.functions import int32, float64

        splicesm = splicesm.transmute(
            ds_ag=float64(splicesm.DS_AG),
            ds_al=float64(splicesm.DS_AL),
            ds_dg=float64(splicesm.DS_DG),
            ds_dl=float64(splicesm.DS_DL),
            sai_sum=float64(splicesm.sai_sum),
            sai_max=float64(splicesm.sai_max),
            sai_loss125=float64(splicesm.sai_loss125),
            sai_loss150=float64(splicesm.sai_loss150),
            sai_1xgb=float64(splicesm.sai_1xgb),
            ssm_1e=float64(splicesm.ssm_1e),
            ssm_1amne=float64(splicesm.ssm_1amne),
            ssm_1amdi=float64(splicesm.ssm_1amdi),
            ssm_1amnsu=float64(splicesm.ssm_1amnsu),
            sai_2xgb=float64(splicesm.sai_2xgb),
            ssm_2e=float64(splicesm.ssm_2e),
            ssm_2amne=float64(splicesm.ssm_2amne),
            ssm_2amdi=float64(splicesm.ssm_2amdi),
            ssm_2amnsu=float64(splicesm.ssm_2amnsu),
            absplice=float64(splicesm.absplice),
            pangolin=float64(splicesm.pangolin),
            start=int32(splicesm.start),
        )

        # Index the variants for which scores are available to match
        # the keys of Hail tables
        splicesm = splicesm.key_by(
            locus=hl.locus(splicesm.chr, splicesm.start, reference_genome="GRCh38"),
            alleles=[splicesm.ref, splicesm.alt],
        )

        # Load all variants from gnomAD genomes and perform QC and
        # annotations
        genomes = preprocessing(
            config["genomes_ht_path"],
            config["context_ht_path"],
            config["mutation_rates_ht_path"],
            config["coverage_genomes_ht_path"],
            {"female": config["female_genomes"], "male": config["male_genomes"]},
        )

        splicesm = splicesm[genomes.key]
        genomes = genomes.annotate(
            ds_ag=splicesm.ds_ag,
            ds_al=splicesm.ds_al,
            ds_dg=splicesm.ds_dg,
            ds_dl=splicesm.ds_dl,
            sai_sum=splicesm.sai_sum,
            sai_max=splicesm.sai_max,
            sai_loss125=splicesm.sai_loss125,
            sai_loss150=splicesm.sai_loss150,
            ssm_1xgb=splicesm.ssm_1xgb,
            ssm_1e=splicesm.ssm_1e,
            ssm_1amne=splicesm.ssm_1amne,
            ssm_1amdi=splicesm.ssm_1amdi,
            ssm_1amnsu=splicesm.ssm_1amnsu,
            ssm_2xgb=splicesm.ssm_2xgb,
            ssm_2e=splicesm.ssm_2e,
            ssm_2amne=splicesm.ssm_2amne,
            ssm_2amdi=splicesm.ssm_2amdi,
            ssm_2amnsu=splicesm.ssm_2amnsu,
            absplice=splicesm.absplice,
            pangolin=splicesm.pangolin,
        )

        genomes = genomes.annotate(AC=genomes.freq[0].AC)
        genomes=genomes.filter(genomes.worst_csq!="stop_gained")
        genomes.select(
            "context",
            "ref",
            "alt",
            "methylation_level",
            "mu",
            "worst_csq",
            "protein_coding",
            "coverage",
            "AC",
            "ds_ag",
            "ds_al",
            "ds_dg",
            "ds_dl",
            "sai_sum",
            "sai_max",
            "sai_loss125",
            "sai_loss150",
            "ssm_1xgb",
            "ssm_1e",
            "ssm_1amne",
            "ssm_1amdi",
            "ssm_1amnsu",
            "ssm_2xgb",
            "ssm_2e",
            "ssm_2amne",
            "ssm_2amdi",
            "ssm_2amnsu",
            "absplice",
            "pangolin",
        ).export(output[0])


###############################################################################
#                                    Missense                                   #
###############################################################################


rule annotate_exomes_w_missense:
    output:
        variants_w_missense_exomes,
    run:
        import hail as hl
        from preprocessing import preprocessing

        # Read the scores, converting "chrN" (hg38) to "N" (hg19)
        splicesm = hl.import_table(
            missense_scores_exomes,
            #"gs://vccri-mikgud-uscentral1/gnomad_exomes_v2111_sai_ssm_absplice_inner_merge.txt.bgz",
            delimiter="\t",
            missing="",
            find_replace=("chr", ""),
        )

        # The first line (from the header) will be malformed - get rid of it
        splicesm = splicesm.filter(splicesm.start != "start")

        # Convert the types from "str" to integer/float
        from hail.expr.functions import int32, float64

        splicesm = splicesm.transmute(
            cadd_phred=float64(splicesm.cadd_phred),
            revel=float64(splicesm.revel),
            sift=float64(splicesm.sift),
            polyphen=float64(splicesm.polyphen),
            start=int32(splicesm.start),
        )

        # Index the variants for which scores are available to match
        # the keys of Hail tables
        splicesm = splicesm.key_by(
            locus=hl.locus(splicesm.chr, splicesm.start, reference_genome="GRCh38"),
            alleles=[splicesm.ref, splicesm.alt],
        )

        # Load all variants from gnomAD exomes and perform QC and
        # annotations
        exomes = preprocessing(
           config["exomes_ht_path"],
            config["context_ht_path"],
            config["mutation_rates_ht_path"],
            config["coverage_exomes_ht_path"],
            {"female": config["female_exomes"], "male": config["male_exomes"]},
        )

        splicesm = splicesm[exomes.key]
        exomes = exomes.annotate(            
            cadd_phred=splicesm.cadd_phred,
            revel=splicesm.revel,
            sift=splicesm.sift,
            polyphen=splicesm.polyphen,
        )

        exomes = exomes.annotate(AC=exomes.freq[0].AC)
        exomes=exomes.filter(exomes.worst_csq!="stop_gained")
        exomes.select(
            "context",
            "ref",
            "alt",
            "methylation_level",
            "mu",
            "worst_csq",
            "protein_coding",
            "coverage",
            "cadd_phred",
            "revel",
            "sift",
            "polyphen",
        ).export(output[0])
